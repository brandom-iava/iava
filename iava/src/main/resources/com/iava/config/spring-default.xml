<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"  xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">

	<!-- <bean class="com.tydic.util.SpringContext" lazy-init="false"/> -->
	<import resource="classpath:com/iava/test/config/spring-test.xml"/>
	<context:annotation-config/>
	
	<!-- 默认使用jdk的动态代理，当使用@AspectJ自动代理时要强制使用CGLIB，请将<aop:aspectj-autoproxy> 的proxy-target-class属性设置为true -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- 要让JSR-250 的注释生,需要添加下面配置（spring还支持JSR规范定义的 @Resource（相当于@Autowired）、@PostConstruct 以及 @PreDestroy等注解） 
	, 申明了context:annotation-config这个就不需要了
	<bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>-->
	
	<!-- 自动扫描制定包名下的含有bean注解的类自动装入到bean容器 -->
	<context:component-scan base-package="com.iava.opensource.spring">
	</context:component-scan>
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>file:./config/iava/jdbc-config.properties</value>
				<value>file:./config/iava/cache-config.properties</value>
				<value>file:./config/iava/sysconf.properties</value>
			</list>
		</property>
	</bean>
	<bean id="memcachedAdvise" class="com.iava.opensource.spring.MemcachedAdvise">
    </bean>
	<!-- tx advice -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<tx:annotation-driven/>
	<!-- txManager -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- sqlmap client template 
	<bean id="sqlClient" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
		<property name="sqlMapClient">
			<bean class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
				<property name="configLocation" value="classpath:com/tydic/config/ibatis-default.xml" />
				<property name="dataSource" ref="dataSource" />
			</bean>
		</property>
	</bean>-->
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation" value="classpath:com/iava/config/ibatis-default.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="sqlClient" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
		<property name="sqlMapClient" ref="sqlMapClient"/>
	</bean>
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	<bean id="mcc" class="net.rubyeye.xmemcached.utils.XMemcachedClientFactoryBean"
		destroy-method="shutdown">
		<property name="servers">
			<value>${cache.list}</value>
		</property>
		<!-- <property name="weights"> <value>${cache.list.weight}</value> </property> -->
		<property name="connectionPoolSize" value="${cache.connSize}" />
		<property name="failureMode" value="${cache.failover}" />
		<!-- Use binary protocol,default is TextCommandFactory -->
		<property name="commandFactory">
			<bean class="net.rubyeye.xmemcached.command.BinaryCommandFactory"></bean>
		</property>
		<!-- Distributed strategy -->
		<property name="sessionLocator">
			<!-- consistent hash -->
			<bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator" />
		</property>
		<!-- Serializing transcoder -->
		<property name="transcoder">
			<bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder" />
		</property>
		<!-- ByteBuffer allocator -->
		<property name="bufferAllocator">
			<bean class="net.rubyeye.xmemcached.buffer.SimpleBufferAllocator"></bean>
		</property>
	</bean>
	<!-- xmem客户端 
	<bean id="xmemClient" class="com.tydic.cache.XMemClient"
		lazy-init="true" init-method="init">
		<property name="isBuildKey" value="true" />
		<property name="connectionTime" value="${cache.connectTimeout}"/>
		<property name="readTime" value="${cache.readTimeout}"/>
		<property name="expireTime" value="${cache.expireTime}"/>
		<property name="mcc" ref="mcc">
		</property>
	</bean>-->
	<!-- 默认的缓存拦截器 
	<bean id="default.cache.Interceptor" class="com.tydic.activity.common.MemCacheDefInterceptor">
		<property name="cacheHandler">
			<ref local="xmemClient" />
		</property>
	</bean>-->
	
	<!-- 在spring里配置cache就和在spring配置数据库一样， -->  
         
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">  
        <property name="configLocation">    
            <value>classpath:com/iava/config/ehcache.xml</value>    
        </property>   
    </bean>  
  
    <bean id="methodCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">  
        <property name="cacheManager">  
            <ref local="cacheManager"/>  
        </property>  
        <property name="cacheName">  
            <value>com.iava.MethodCache</value>  
        </property>  
    </bean>  
    <bean id="methodCacheInterceptor" class="com.iava.cache.ehcache.MethodCacheInterceptor">  
        <property name="cache">  
            <ref local="methodCache"/>  
        </property>  
    </bean>  
    <bean id="methodCachePointCut" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">  
        <property name="advice">  
            <ref local="methodCacheInterceptor"/>  
        </property>  
        <!-- 下面的配置就使得在数据访问时，cache将拦截从数据库获取的数据，与cache数据比较，如有就不放入cache，没有就放入，更新到数据库去，也是先存入cache，再更新到数据库中去 -->  
        <property name="patterns">  
            <list>  
                <value>.*getList</value>  
            </list>  
        </property>  
    </bean>  
  
    <bean  id="personManager" class="org.springframework.aop.framework.ProxyFactoryBean">  
        <property name="target">  
            <!--<bean class="manager.PersonManagerImpl"/>-->  
            <ref local="personManagerTarget"/>  
        </property>  
        <property name="interceptorNames">  
            <list>  
                <value>methodCachePointCut</value>  
            </list>  
        </property>  
    </bean>  
      
    <bean id="personManagerTarget" class="com.iava.cache.ehcache.PersonManagerImpl"/>  
</beans>
